plugins {
    id('com.multiproject.common-conventions')
    alias(libs.plugins.spring.boot)
    alias(libs.plugins.spring.dependency.management)
    alias(libs.plugins.versions)
}

dependencies {
    implementation project(':application')
    implementation project(':domain')
    implementation project(':infrastructure')

    implementation(libs.spring.boot.starter.web)

    developmentOnly(libs.spring.boot.devtools)

    testImplementation(libs.spring.boot.test)
}

springBoot {
    mainClass = 'com.testing.taskservice.TaskServiceApplication'
}

bootRun {
    jvmArgs('-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005')

    sourceResources sourceSets.main

    dependsOn(
            ":application:classes",
            ":infrastructure:classes",
            ":domain:classes"
    )

    classpath = files(
            file("${rootDir}/application/build/classes/java/main"),
            file("${rootDir}/infrastructure/build/classes/java/main"),
            file("${rootDir}/domain/build/classes/java/main"),
            sourceSets.main.runtimeClasspath
    )

}

tasks.register("getDependencies", Copy) {
    from(sourceSets.main.runtimeClasspath)
    into("runtime/")

    doFirst {
        println "üßπ Cleaning runtime/"
        delete "runtime"
        file("runtime").mkdirs()
    }

    doLast {
        println "üóëÔ∏è Cleaning up runtime/ after copying"
        delete "runtime"
    }
}